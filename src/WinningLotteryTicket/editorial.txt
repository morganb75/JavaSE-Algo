Every ticket id can be represented as the mask of  bits such that if it contains digit  at least once then  bit will be set in the mask. For example -

If ticket ID = 4556120 then  bits will be set in mask.

Thus mask =  = 

Now, for every masks  from  to , we will store the count of the number of tickets having the mask of their ticket id equal to the .

Let  stores the count of the number of ticket ids whose mask is equal to .

for (m = 0; m < (1 << 10); ++m) {
   cnt[m] = 0;
}
for (i = 1; i <= n; ++i) {
   string x = p[i];
   int mask = 0;
   for(j = 0; j < x.size(); ++j) {
     mask |= (1 << (x[j] - '0'));
   }
   cnt[mask] ++;
}
A pair of ticket ids results in the winning scenario if every bit from  to  is set in the bitwise OR of mask of both the tickets, i.e if it's equal to  = 

Now we iterate over all pairs of masks whose bitwise OR is equal to  and add the number of ways.

Code Snippet

ans = 0
for (m1 = 0; m1 < (1 << 10); ++m1) {
   for (m2 = m1; m2 < (1 << 10); ++m2) {
      if ((m1 | m2) == 1023) {
         if( m1 == m2 ) {
            ans += (cnt [m1] * (cnt [m1] - 1) ) / 2
         } else {
             ans += (cnt [m1] * cnt [m2]);
         }
      }
   }
}
print (ans) 
Set by code_hard123
Problem Setter's code:

#include "bits/stdc++.h"
using namespace std;
const int N = 1e6 + 6;
int n;
int cnt[1 << 10];


void readInp() {
  ios_base :: sync_with_stdio(false);
  cin.tie(NULL);
  string x;
  cin >> n;
  for(int i = 1; i <= n; ++i) {
  	cin >> x;
    int mask = 0;
  	for(int j = 0; j < x.size(); ++j) mask |= (1 << (x[j] - '0'));
  	++cnt[mask];
  }
}

long long solve() {
   long long ans = 0;
   for(int m1 = 0; m1 <= 1023; ++m1) 
   	for(int m2 = 0; m2 <= 1023; ++m2)
   	 if((m1 | m2) == 1023) 
   	 	ans += m1 == m2 ? 1LL * cnt[m1] * (cnt[m1] - 1) : 1LL * cnt[m1] * cnt[m2];	
    return ans / 2LL;
}

void out(long long x) {
	cout << x << endl;
}

int main() {
	readInp();
	out(solve());
	return 0;
}
Tested by pkacprzak
Problem Tester's code:

n = int(raw_input())
p = [raw_input().strip() for _ in xrange(n)]

fullMask = 2**10-1
cntMask = [0 for _ in xrange(fullMask+1)]

for s in p:
    mask = 0
    for c in s:
        mask |= 1 << (ord(c) - ord('0'))
    cntMask[mask] += 1

res = 0
for i in xrange(fullMask+1):
    for j in xrange(i+1, fullMask+1):
        if i | j == fullMask:
            res += cntMask[i] * cntMask[j]

res += cntMask[fullMask] * (cntMask[fullMask]-1) / 2
print res